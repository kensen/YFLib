<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#>

<#+
// https://raw.github.com/damieng/DamienGKit
// http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
        public bool IncludeInDefault;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
	private OutPutConfig output;
    protected List<String> generatedFileNames = new List<String>();

	public string OutProjectName{get;  set;}
	public string OutFolder{get; set;}

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter(bool includeInDefault = true) {
        CurrentBlock = footer;
        footer.IncludeInDefault = includeInDefault;
    }

    public void StartHeader(bool includeInDefault = true) {
        CurrentBlock = header;
        header.IncludeInDefault = includeInDefault;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split,  bool sync = true) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
			String  outputPath = Path.GetDirectoryName(host.TemplateFile);

			if(!string.IsNullOrEmpty( OutProjectName))
            {
				this.output =new OutPutConfig(host,OutProjectName,OutFolder);
				   outputPath=output.GetOutPutPath();
            }

           // if(output!=null && !string.IsNullOrEmpty(output.OutProjectName))
		   //   outputPath=output.GetOutPutPath();
            files.Reverse();
            if (!footer.IncludeInDefault)
                template.Remove(footer.Start, footer.Length);
			
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
            if (!header.IncludeInDefault)
                template.Remove(header.Start, header.Length);
        }
        
    }

	

    protected virtual void CreateFile(String fileName, String content) {

		if(output!=null && !string.IsNullOrEmpty( output.GetOutPutPath() ) && output.OutPutProject!=null)
            {
				 if (!Directory.Exists( output.GetOutPutPath() ))
                    {
                        Directory.CreateDirectory( output.GetOutPutPath() );
						//var newfolder= output.GetOutPutPath() .Substring(output.GetOutPutPath() .LastIndexOf('\\')+1);
						//output.OutPutProject.AddFolder(newfolder,EnvDTE.Constants.vsProjectItemKindPhysicalFolder);
						output.AddNewFolders();
					}
            }

        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);

    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
		//this.output=output;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;	
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split, bool sync) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split, sync);
            if (sync)
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {

			if(output!=null && !string.IsNullOrEmpty( output.GetOutPutPath()  ) && output.OutPutProject!=null)
            {
				 if (!Directory.Exists( output.GetOutPutPath() ))
                    {
                        Directory.CreateDirectory( output.GetOutPutPath() );
						//var newfolder= output.GetOutPutPath() .Substring(output.GetOutPutPath() .LastIndexOf('\\')+1);
						//output.OutPutProject.AddFolder(newfolder,EnvDTE.Constants.vsProjectItemKindPhysicalFolder);
						output.AddNewFolders();
					}
            }

            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames ) => ProjectSync(templateProjectItem, keepFileNames,output);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames, OutPutConfig output) {
           var logContent=new StringBuilder();
			    logContent.AppendLine("// <autogenerated>");
                logContent.AppendLine("//   此代码由T4模板自动生成 " + templateProjectItem.get_FileNames(0)+ ".");
                logContent.AppendLine("//   生成时间 " + DateTime.Now +" by 余庆元");
                logContent.AppendLine("//   该文件用于记录本次生成的对象日志l");
                logContent.AppendLine("//   请不要修改该文件，否则可能导致下次生成对象时候删错已有对象");
                logContent.AppendLine("// </autogenerated>");

			 var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
           var logName=templateProjectItem.get_FileNames(0).Replace("tt","log");
			 foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach(var pair in projectFiles)
            {
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();
				
            }

			if(File.Exists(logName))
            {
			// 根据上次log 生成记录判断本次不存在的对象，并删除
			 foreach (string line in File.ReadAllLines(logName))
                {
                    string relativePath = line.Trim();

                    // Skip blank lines
                    if (relativePath.Length == 0)
                    {
                        continue;
                    }

                    // Skip comments
                    if (relativePath.StartsWith("//", StringComparison.OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    string absolutePath = Path.GetFullPath(relativePath);

                    // Skip the file if it was regenerated during current transformation
                    if (keepFileNames.Contains(absolutePath))
                    {
                        continue;
                    }

                    // The file wasn't regenerated, delete it from the solution, source control and file storage
                    EnvDTE.ProjectItem projectItem =templateProjectItem.DTE.Solution.FindProjectItem(absolutePath);
                    if (projectItem != null)
                    {
                        projectItem.Delete();
                    }
                }
            }

            // Add missing files to the project
            foreach(String fileName in keepFileNameSet)
            {
				EnvDTE.ProjectItem p=null;
                if (!projectFiles.ContainsKey(fileName))					
                {
					if(output !=null && output.OutPutProject!=null)
                    {
						p=output.OutPutProject.AddFromFile(fileName);
                    }else
                    {
						p=templateProjectItem.ProjectItems.AddFromFile(fileName);
                    }
                }	
				    
					//将生成对象写入日志
					logContent.AppendLine(fileName);
			}
            //生成日志文件
			 File.WriteAllText(logName, logContent.ToString(),Encoding.UTF8);
			templateProjectItem.ProjectItems.AddFromFile(logName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }


    }


	private class OutPutConfig{

    public string OutProjectName{get; private set;}
	public string OutFolder{get;private set;}
	public EnvDTE.ProjectItems OutPutProject{get; private set;}
	private readonly ITextTemplatingEngineHost host;

	//构造函数，并初始化当前要操作的 ProjectItems 对象
	public OutPutConfig(ITextTemplatingEngineHost host,string outProjectName, string outFolder)
    {
		this.host=host;
		OutProjectName=outProjectName;
		OutFolder=outFolder;
		OutPutProject=GetOutPutProject();
    }

	public string GetOutPutPath()
    {
		string path="";

		if(!string.IsNullOrEmpty(OutProjectName))
        {
		    path=host.ResolveAssemblyReference("$(SolutionDir)")+OutProjectName+ (string.IsNullOrEmpty( OutFolder)?"":"\\"+OutFolder).ToString();
        }

		return  path;
    }

	public EnvDTE.ProjectItems GetOutPutProject()
    {

		 var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
         EnvDTE.DTE   dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));

		if(!string.IsNullOrEmpty(OutProjectName))
        {
			return  dte.Solution.FindProjectItem(host.ResolveAssemblyReference("$(SolutionDir)")+OutProjectName+"\\Properties\\AssemblyInfo.cs").ContainingProject.ProjectItems;
    
		}else
        {
			throw new ArgumentNullException("没有对应的项目，请先设置好项目名称！");
        }
    }

	public void AddNewFolders()
    {
		List<string> floders=OutFolder.Split('\\').ToList();

		var addto=OutPutProject;

		foreach(var floder in floders)
        {
			try
            {
				addto= addto.Item(floder).ProjectItems;
				//continue;
            }catch
            {
				addto=addto.AddFolder(floder).ProjectItems;
            }
			
        }

    }

}

} 



#>