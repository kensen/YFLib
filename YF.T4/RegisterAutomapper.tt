<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<#@ include file="$(ProjectDir)MultipleOutputHelper.ttinclude" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)Config.ttinclude"  #>

<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE100" #>
<#
  IServiceProvider serviceProvider = (IServiceProvider)this.Host;
  EnvDTE.DTE dte = (EnvDTE.DTE) serviceProvider.GetService(typeof(EnvDTE.DTE));
#>


<#
   List<DbTable> tablelist=DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase,config.Tables);
#>
<#	
	// OutPutConfig output=new OutPutConfig(Host,"ConsoleApplication1","Models");
	//output.OutProjectName="ConsoleApplication1";
	//output.OutFolder="Models";
		 //output.OutPutPath=Host.ResolveAssemblyReference("$(ProjectDir)")+"Models";
		 //output.OutPutProject=dte.Solution.FindProjectItem(Host.ResolveAssemblyReference("$(SolutionDir)")+"YF.T4\\Properties\\AssemblyInfo.cs").ContainingProject.ProjectItems;
	var manager = Manager.Create(Host, GenerationEnvironment);  
	manager.OutProjectName="YF.T4";
	manager.OutFolder="Out\\Service"; 
	//输出文件名称
	   manager.StartNewFile("RegisterAutomapper.cs");
   
	   
 #>
 
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by 余庆元
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------


using <#= config.ModelNamespace #>;
using <#= config.DtoNamespace #>;
using AutoMapper;
using System;
using YF.Base.Data;
namespace <#= config.ServicesNamespace #>
{	
	
	 public static class RegisterAutomapper
    {
		public static void Excute()
       {		

		 Mapper.Initialize(cfg => {
		 <# foreach(DbTable table in tablelist)
		 {#>
				cfg.CreateMap<<#=table.TableName#>, <#=table.TableName#>Dto>();
					cfg.CreateMap<<#=table.TableName#>Dto, <#=table.TableName#>>();
	 <#}#>
		 });
		}
	}
}
 
 
<#
   manager.EndBlock();    
   //this.Host.ResolvePath
   manager.Process(true);
    
   #>



  
  


