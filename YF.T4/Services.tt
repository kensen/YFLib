<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<#@ include file="$(ProjectDir)MultipleOutputHelper.ttinclude" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)Config.ttinclude"  #>

<#
   List<DbTable> tablelist=DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase,config.Tables);
#>
<#
	var manager = Manager.Create(Host, GenerationEnvironment);  

	manager.OutProjectName="YF.T4";
	manager.OutFolder="Out\\Services";

   foreach(DbTable table in tablelist)
   {
	   manager.StartNewFile(table.TableName+"Service.cs");
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by 余庆元
//     对此文件为固定的仓储基类继承，修改可能导致重新生成时被覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.Configuration;
using YF.Base.Data;
using <#= config.ModelNamespace #>;
using <#= config.RepositoryNamespace #>;
using <#= config.DtoNamespace #>;

namespace <#= config.ServicesNamespace #>
{	
    <# List<DbColumn> columnlist= DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, table.TableName); #>
	

	 public class <#=table.TableName#>Service:I<#=table.TableName#>
    {
        IConnectionFactory connection = new ConnectionFactory();
        <#=table.TableName#>Repository repository;

        public <#=table.TableName#>Service()
        {
            repository = new <#=table.TableName#>Repository(connection);
           // Mapper.CreateMap<<#=table.TableName#>, <#=table.TableName#>Dto>();
           // Mapper.CreateMap<<#=table.TableName#>Dto, <#=table.TableName#>>();

			//var cfg = new MapperConfigurationExpression();
			//cfg.CreateMap<<#=table.TableName#>, <#=table.TableName#>Dto>();
			//cfg.CreateMap<<#=table.TableName#>Dto, <#=table.TableName#>>();
			//Mapper.Initialize(cfg);
        }

        public bool Add(<#=table.TableName#>Dto dto)
        {
            <#=table.TableName#> model = Mapper.Map<<#=table.TableName#>Dto, <#=table.TableName#>>(dto);
            return repository.Insert(model);
        }

        public bool Update(<#=table.TableName#>Dto dto)
        {
           // throw new NotImplementedException();
          //  <#=table.TableName#> model = Mapper.Map<<#=table.TableName#>Dto, <#=table.TableName#>>(dto);
            return repository.Update<<#=table.TableName#>Dto>(dto);
        }

        public bool Delete(<#= columnlist.Where(a=>a.IsPrimaryKey==true).FirstOrDefault().CSharpType #> id)
        {
            return repository.Delete(id);
        }

        public bool Delete(string ids)
        {
            return repository.Delete(ids);
        }

        public List<<#=table.TableName#>Dto> GetAll()
        {
          //  AutoMapper.Mapper.CreateMap<Address, AddressDto>();
            var <#=table.TableName#>DtoList = Mapper.Map<List<<#=table.TableName#>>, List<<#=table.TableName#>Dto>>(repository.GetList());
            return <#=table.TableName#>DtoList;
        }

        public List<<#=table.TableName#>Dto> GetList(List<QueryBuilder> qbList)
        {
           // throw new NotImplementedException();
            var <#=table.TableName#>DtoList = Mapper.Map<List<<#=table.TableName#>>, List<<#=table.TableName#>Dto>>(repository.GetList(qbList));
            return <#=table.TableName#>DtoList;
        }

        public List<<#=table.TableName#>Dto> GetPageList(List<QueryBuilder> queryBuliders, SortCondition sort, int intPageSize, int intCurrentIndex, out int total)
        {
           // throw new NotImplementedException();
            
            var <#=table.TableName#>DtoList = Mapper.Map<List<<#=table.TableName#>>, List<<#=table.TableName#>Dto>>(repository.QueryPage(queryBuliders,sort,intPageSize,intCurrentIndex,out total));
            return <#=table.TableName#>DtoList;
        }

        public List<<#=table.TableName#>Dto> GetPageList(string sql, SortCondition sort, int intPageSize, int intCurrentIndex, out int total)
        {
            throw new NotImplementedException();
        }
    }

}

<#
   manager.EndBlock();    
   }
   manager.Process(true);
    
   #>
  


